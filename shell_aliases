# systemd
alias sstatus='sudo systemctl status'
alias sstart='sudo systemctl start'
alias sstop='sudo systemctl stop'
alias srestart='sudo systemctl restart'
alias senable='sudo systemctl enable'
alias sdisable='sudo systemctl disable'

# ls
alias l='ls'
alias la='ls -a'
alias ll='ls -lah'
alias ls='ls --color=auto'

# git
alias git-fix-perm='git diff -p -R --no-ext-diff --no-color | grep -E "^(diff|(old|new) mode)" --color=never | git apply'
alias ga="git add"
alias gap="git add -p"
alias gc="git commit -v"
alias gco="git checkout"
alias gcr="git clone --recursive"
alias gd="git diff"
alias gg="git grep"
alias gst="git status"

# utils
alias bbat='bat --style=plain'
alias changelog-version="head -n 1 debian/changelog | cut -d' ' -f2  | cut -d'-' -f1 | cut -d'(' -f2"
alias clean-python-cache='find . | grep -E "(__pycache__|\.pyc|\.pyo$)" | xargs rm -rf'
alias fix-pycharm="ibus-daemon -rd"
alias fix-scroll-history="tput rmcup "
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
alias docker-stop-rm='docker ps -aq | xargs docker stop | xargs docker rm'

# if [ -x "$(command -v colima)" ]; then
#   export DOCKER_HOST=unix://$HOME/.colima/default/docker.sock
# fi

# show permissions using numeric notation
lso() { ls -l "$@" | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}'; }


alias pissh="mssh -u pi -h"

build_for() {
        PLATFORM="${1}"
        DISTRO="${2}"

        if [ $# -ne 2 ] || [ "${PLATFORM}" != "armhf" ] && [ "${PLATFORM}" != "arm64" ] && [ "${PLATFORM}" != "amd64" ] || [ "${DISTRO}" != "bullseye" ] && [ "${DISTRO}" != "bookworm" ]; then
                echo "Usage: build_for <armhf|arm64|amd64> <bullseye|bookworm>"
                return 1
        fi

        REPO_NAME=$(basename "${PWD}")
        BUILD_FOLDER="${PWD}/build-${PLATFORM}-${DISTRO}"
        CONTAINER_NAME="${REPO_NAME}-deb-builder-${PLATFORM}-${DISTRO}"

        mkdir -p "${BUILD_FOLDER}"

        echo "Building ${REPO_NAME} for ${PLATFORM} in ${DISTRO} into ${BUILD_FOLDER}..."

        if [ -n "$(docker ps -q -f name="${CONTAINER_NAME}")" ]; then
                echo "Container '${CONTAINER_NAME}' already exists, skipping creation..."
        else
                docker create \
                        --name "${CONTAINER_NAME}" \
                        --volume "${PWD}":/src \
                        --volume "${BUILD_FOLDER}":/build \
                        --tty \
                        --platform linux/"${PLATFORM}" \
                        pitop/pi-top-os-deb-build:"${DISTRO}"-master \
                        sleep inf
                docker start "${CONTAINER_NAME}"
                docker exec "${CONTAINER_NAME}" /install-deb-build-deps
        fi
        docker exec "${CONTAINER_NAME}" /build-deb
}
